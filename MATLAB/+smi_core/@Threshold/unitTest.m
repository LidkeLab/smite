function success = unitTest()
    %  unitTest for setThreshFlag() in smi_core.Threshold class.
    %  A test image stack is generated using functions gaussBlobImage,
    %  data2Photons, findROI and gaussMLE from SMA_Sim class.
    %  The image stack is used to generate SMD structure, which forms the input
    %  for this unitTest. Additional fields are generated for SMD  and
    %  filled up with random numbers. MinMax structure is also provided as
    %  input to the unitTest. The SMD.ThreshFlag is generated by running
    %  setThreshFlag.
    %  The routine then runs through each field of SMD dataset to check
    %  if the flag value for the field at each localization is set correct.
    %
    %  OUTPUT: success (0 if passed; 1 if failed)

    %Created by
    %  Sandeep Pallikkuth, Lidkelab 2017
    % Revised Michael Wester 2020.
    %  ---------------------------------------------------------------------

    success=0;

    %SMD.NFiles=1; %Create a SMD structure
    PSFSigma=1;

    % Create default SMF structure.
    SMF = smi_core.SingleMoleculeFitting();

    %Data=SMA_Sim.gaussBlobImage();
    Data=smi_sim.GaussBlobs.gaussBlobImage();

    %Data2Photons
    CameraType='EMCCD';
%   if strcmp(CameraType,'EMCCD')
%       CCDCalibration=struct('ROI',[],'OffsetImage',0,'GainImage',1,'ReadnoiseImage',[]);
%   elseif strcmp(CameraType,'SCMOS')
%       Y_start=897;
%       X_start=897;
%       Y_end=1152;
%       X_end=1152;
%       %CCDCalibration.ROI=[Y_start X_start Y_end X_end];
%       %CCDCalibration.OffsetImage=abs(single(normrnd(100,2,[Y_end-Y_start+1 X_end-X_start+1])));
%       %CCDCalibration.GainImage=abs(single(normrnd(2,0.05,[Y_end-Y_start+1 X_end-X_start+1])));
%       %CCDCalibration.ReadnoiseImage=abs(single(normrnd(50,40,[Y_end-Y_start+1 X_end-X_start+1])));
%   end
    if strcmp(CameraType,'EMCCD')
        RawDataROI=[];
        CameraOffset=0;
        CameraGain=1;
        CameraReadNoise=[];
    elseif strcmp(CameraType,'SCMOS')
        Y_start=897;
        X_start=897;
        Y_end=1152;
        X_end=1152;
        RawDataROI=[Y_start X_start Y_end X_end];
        CameraOffset=abs(single(normrnd(100,2,[Y_end-Y_start+1 X_end-X_start+1])));
        CameraGain=abs(single(normrnd(2,0.05,[Y_end-Y_start+1 X_end-X_start+1])));
        CameraReadNoise=abs(single(normrnd(50,40,[Y_end-Y_start+1 X_end-X_start+1])));
    end
    %[Data,CCDReadnoise]=SMA_Core.data2Photons(Data,CCDCalibration);
    [Data, CCDReadnoise] = smi_core.DataToPhotons.convertToPhotons(Data, ...
       CameraGain, CameraOffset, CameraReadNoise, RawDataROI);

    MinInt=1000/(4*pi*PSFSigma^2)/4;
    %[SMD,ROIStack]=SMA_Core.findROI(SMD,Data,PSFSigma,2*PSFSigma,PSFSigma*6,MinInt);
    SMF.BoxFinding.BoxSize    = 6*PSFSigma;
    SMF.BoxFinding.MinPhotons = MinInt;
    SMF.Fitting.PSFSigma      = PSFSigma;
    FindROI = smi_core.FindROI(SMF, Data);
    [ROIStack, SMD] = FindROI.findROI();

    %[SMD,Statistics]=SMA_Core.gaussMLE(ROIStack,'Basic','CCD',PSFSigma);
    SMF.Fitting.FitType  = 'XYNB';
    SMF.Fitting.PSFSigma = PSFSigma;
    GaussMLE = smi_core.GaussMLE(SMF, ROIStack);
    GaussMLE.CameraType = CameraType;
    [SMD, Statistics] = GaussMLE.gaussMLE(SMD);

    Threshold = smi_core.Threshold;
    FNames = Threshold.Fields;
    %FNames={'X';'Y';'Z';'Photons';'Bg';'PSFSigma';'PSFSigmaX';'PSFSigmaY';'X_SE';'Y_SE';'Z_SE';'Photons_SE';'Bg_SE';'PSFSigma_SE';'PSFSigmaX_SE';'PSFSigmaY_SE';'ZOffset';'DatasetNum';'FrameNum';'PValue';'LogLikelihood';'ConnectID'};
    SMDFN=fieldnames(SMD);
    for i=1:length(FNames)
        Check1=ismember(FNames(i),SMDFN);
        if Check1==0
            fn1=char(FNames(i));
            data=abs(randn(length(SMD.X),1));
            value1=data./max(data);
            SMD=setfield(SMD,fn1,value1);
        end
    end
    SMDFNames=fieldnames(SMD);
    MinMax.X=[];
    for i=1:length(SMDFNames)
        fn1=char(SMDFNames(i));
        MinMax=setfield(MinMax,fn1,[0.23 0.85]);
    end
    MinMax.X=[];
    MMFN=fieldnames(MinMax);
    for i=1:length(MMFN)
        Check2=ismember(MMFN(i),FNames);
        if Check2==0
            MinMax=rmfield(MinMax,MMFN(i));
        end
    end

    % ------ generating data done ---------

    fprintf('Running setThreshFlag with empty MinMax\n');
    MinMax1.X=MinMax.X;
    [SMD,TFlag]=Threshold.setThreshFlag(SMD, MinMax1);
    fprintf('Running setThreshFlag with nonempty MinMax\n');
    MinMax2=rmfield(MinMax,'X');
    MinMax2=rmfield(MinMax2,'Y');
    MinMax2=rmfield(MinMax2,'Z');
    [SMD,TFlag]=Threshold.setThreshFlag(SMD, MinMax2);
    MM2FN=fieldnames(MinMax2);
    NFields=length(MM2FN);
    FNThresh=getfield(SMD,'ThreshFlag');
    for nn=1:NFields
        FN1=getfield(MinMax2,MM2FN{nn});
        FN2=getfield(SMD,MM2FN{nn});
        for i=1:length(FN2)
            if (FN2(i)<FN1(1)||FN2(i)>FN1(2))>0
                binvar=fliplr(dec2bin(FNThresh(i),32));
                j=strmatch(MM2FN{nn},FNames,'exact');
                if binvar(j)==0
                    success=1;
                end
            end
        end
    end
end % unitTest
