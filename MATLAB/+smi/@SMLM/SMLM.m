classdef SMLM < handle
% Single Molecule Localization Microscopy Analysis
%
% This is a high-level class that provides complete analysis of SMLM data.
%
%

% =========================================================================
properties
    SMF         % Single Molecule Fitting structure
    PlotDo = [] % Plots to generate (all by default);see generatePlots comments
    %       Preset      % {'TIRF', 'Sequential'} good idea?
    %       Data        % Current dataset or used for manual setting of data
    %       DataType    % {'File', 'UserDefined'} ?
    Verbose = 1 % Verbosity level
end
% =========================================================================

% =========================================================================
properties (Access=protected)
    DC               % DriftCorrection class object used internally
    SMD              % SMD structure with final analysis results
    SMDPreThresh     % Keeps track of why localizations were filtered out
end % properties (Access=protected)
% =========================================================================

% =========================================================================
methods

    function obj=SMLM(SMF,StartGUI)
        %SMLM Create an SMLM object
        %
        % INPUTS:
        %   SMF: Single Molecule Fitting Structure (Optional)
        %   StartGUI:   Automatically open the GUI (0 or 1)
        %
        % OUTPUT:
        %   SMLMobj: SMLM object. Autogenerated if nargout==0
        %
        %   If no inputs are given, a GUI is opened by default

        switch nargin
            case 0
                obj.SMF=smi_core.SingleMoleculeFitting();
                StartGUI=1;
            case 1
                obj.SMF = SMF;
                StartGUI=0;
            case 2
                obj.SMF = SMF;
        end

        %Autonaming
        if nargout==0 % No name has been given
            varname = 'SMLMobj'; % try using SR
            if exist(varname,'var') %if that fails try SR1,SR2, ...
                n=1;
                s=sprintf('%s%d',varname,n);
                while exist(s,'var')
                    s=sprintf('%s%d',varname,n);
                    n=n+1;
                end
                assignin('base',s,obj);
            else
                assignin('base',varname,obj);
            end
        end

        if StartGUI
            obj.gui();
        end

    end

    % ---------------------------------------------------------------------

    function setSMD(obj, SMD)
        % Interface to set the SMD property of the object.

        obj.SMD = SMD;

    end

    % ---------------------------------------------------------------------

    function fullAnalysis(obj)
        % fullAnalysis analyzes all data and saves results.

        obj.analyzeAll();
        obj.saveResults();
        ShowPlots = false;
        obj.generatePlots(ShowPlots, obj.PlotDo);

        %save
        if obj.Verbose >= 1
            fprintf('Done fullAnalysis.\n');
        end

    end

    % ---------------------------------------------------------------------

    function testFit(obj, DatasetIndex)
        %testFit performs detailed analysis and feedback of one dataset.

        obj.analyzeAll(DatasetIndex);
        ShowPlots = true;
        obj.generatePlots(ShowPlots, obj.PlotDo);
        if obj.Verbose >= 1
            fprintf('Done testFit.\n');
        end

    end

    % ---------------------------------------------------------------------

    function analyzeAll(obj, DatasetList)
        % analyzeAll loops over dataset and creates SMD.

        % Define the list of datasets to be processed.
        obj.SMF = smi_core.LoadData.setSMFDatasetList(obj.SMF);
        % DatasetList takes priority over what is in SMF.
        if ~exist('DatasetList', 'var')
            DatasetList = obj.SMF.Data.DatasetList;
       %else
       %    obj.SMF.Data.DatasetList = DatasetList;
        end

        % DriftCorrection class object is also used in analyzeDataset.
        obj.DC = smi_core.DriftCorrection(obj.SMF);
        obj.DC.Verbose = obj.Verbose;
        obj.SMD=[];
        obj.SMDPreThresh.X=[];
        obj.SMDPreThresh.Y=[];
        obj.SMDPreThresh.ThreshFlag=[];
        if obj.Verbose >= 1
            fprintf('Processing %d datasets ...\n', numel(DatasetList));
        end
        for nn=1:numel(DatasetList)
            SMDnn = obj.analyzeDataset(DatasetList(nn), nn);
            obj.SMD=smi_core.SingleMoleculeData.catSMD(obj.SMD,SMDnn);
        end

        % Inter-dataset drift correction.
        if numel(DatasetList) > 1
            if obj.Verbose >= 1
                fprintf('Drift correcting (inter-dataset) ...\n');
            end
            obj.SMD = obj.DC.driftCorrectKNNInter(obj.SMD);
        end

        THR = smi_core.Threshold;
        if obj.Verbose >= 1
           THR.rejectedLocalizations(obj.SMDPreThresh, '');
        end
    end

    % ---------------------------------------------------------------------

    function SMD=analyzeDataset(obj,DatasetIndex,DatasetCount)
        % analyzeDataset Load and analyze one dataset

        if ~exist('DatasetCount', 'var')
            DatasetCount = 1;
        end

        if obj.Verbose >= 1
            fprintf('Loading dataset %d ...\n', DatasetIndex);
        end
        [Dataset, obj.SMF]=obj.loadDataset(obj.SMF,DatasetIndex);

        % Generate localizations from the current Dataset.
        LD = smi_core.LocalizeData(Dataset, obj.SMF);
        LD.Verbose = obj.Verbose;
        if obj.Verbose >= 1
            fprintf('Generating localizations ...\n');
        end
        [SMD] = LD.genLocalizations();

        % Keep track of why localizations were filtered out.
        obj.SMDPreThresh.X = [obj.SMDPreThresh.X; LD.SMDPreThresh.X];
        obj.SMDPreThresh.Y = [obj.SMDPreThresh.Y; LD.SMDPreThresh.Y];
        obj.SMDPreThresh.ThreshFlag = ...
            [obj.SMDPreThresh.ThreshFlag; LD.SMDPreThresh.ThreshFlag];

        % Define NDatasets, and DatasetNum from the dataset count.
        SMD.NDatasets  = 1;
        SMD.DatasetNum = DatasetCount * ones(size(SMD.FrameNum));

        % Perform frame-connection on localizations in SMD.
        if obj.SMF.FrameConnection.On
            FC = smi_core.FrameConnection(SMD, obj.SMF);
            [SMD, ~, OutputMessage] = FC.performFrameConnection();
            if obj.Verbose >= 1
                fprintf('%s', OutputMessage);
            end
        end

        % Intra-dataset drift correction.
        if obj.SMF.DriftCorrection.On
            if obj.Verbose >= 1
                fprintf('Drift correcting (intra-dataset) ...\n');
            end
            SMD = obj.DC.driftCorrectKNNIntra(SMD, DatasetIndex);
        end
    end

    % ---------------------------------------------------------------------

    function [Dataset, SMF]=loadDataset(obj,SMF,DatasetIndex)
        % loadDataset loads a dataset and converts to photons
        % set obj.Data
        LD = smi_core.LoadData;
        switch SMF.Data.FileType
            case 'mat'
                [~, Dataset, SMF] = ...
                    LD.loadRawData(SMF, SMF.Data.DataVariable, DatasetIndex);

            case 'h5'
                [~, Dataset, SMF] = LD.loadRawData(SMF, DatasetIndex);
        end % switch
    end

    % ---------------------------------------------------------------------

    function saveResults(obj)
        % saveResults saves all results and plots in subfolder.
        % gaussblobs, drift image, fits/frame, NumConnected hist,
        % Driftcorrection plots, precision hist, intensity hist,
        % mat file with SMD and SMF files.
        if isempty(obj.SMD)
            error('No SMD results structure found to save!');
        end

        [~, f, ~] = fileparts(obj.SMF.Data.FileName{1});
        if isempty(obj.SMF.Data.AnalysisID)
            fn = [f, '_Results.mat'];
        else
            fnextend = strcat('_Results_', obj.SMF.Data.AnalysisID, '.mat');
            fn = [f, fnextend];
        end

        SMD = obj.SMD;
        SMF = obj.SMF;
        if obj.Verbose >= 1
            fprintf('Saving SMD and SMF structures ...\n');
        end
        if ~isfolder(obj.SMF.Data.ResultsDir)
            mkdir(obj.SMF.Data.ResultsDir);
        end
        save(fullfile(obj.SMF.Data.ResultsDir, fn), 'SMD', 'SMF', '-v7.3');
    end

    % ---------------------------------------------------------------------

    generatePlots(obj, ShowPlots, PlotDo)
    gui(obj)
end % methods
% =========================================================================

% =========================================================================
methods(Static)
    [FigHandle] = plotCumDrift(SMD, FieldName)
    Success = unitTest()
end % methods(Static)
% =========================================================================

end
